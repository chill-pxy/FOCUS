#version 450

layout(binding = 1) uniform sampler2D texSampler;

layout(location = 0) in vec3 fragColor;
layout(location = 1) in vec2 fragTexCoord;
layout(location = 2) in vec3 fragPosition;
layout(location = 3) in vec3 fragNormal;

layout(location = 4) in vec3 fragViewPosition;

layout(location = 5) in vec3 fragPointLightPosition;
layout(location = 6) in vec3 fragPointLightColor;
layout(location = 7) in float fragPointLightStrength;

layout(location = 8) out vec3 fragDirLightDirection;

layout(location = 0) out vec4 outColor;

// calculate point light
vec3 calPointLight(vec3 color)
{
    // compute light direction
    vec3 lightDir = normalize(fragPointLightPosition - fragPosition);
    
    // compute view direction
    vec3 viewDir = normalize(fragViewPosition - fragPosition);
    
    // compute distance
    float distance = length(fragPointLightPosition - fragPosition);
    float attenuation = 1.0 / (distance * distance) * fragPointLightStrength;

    // compute normal
    vec3 norm = normalize(fragNormal);

    // ambient
    float ambientStrength = 0.05;
    vec3 ambient = ambientStrength * color  * fragPointLightColor * attenuation;
    
    // diffuse
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * color  * fragPointLightColor * attenuation;
    
    // specular
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), 5); // 这里的32是光泽度指数
    vec3 specular = spec * fragPointLightColor * 0.3 * attenuation;

    return (ambient + diffuse + specular);
}

void main()
{
    vec3 color = texture(texSampler, fragTexCoord).rgb;
    
    vec3 pointLight = calPointLight(color);
    
    // output
    outColor = vec4(pointLight, 1.0);
}